{
  
    
        "post0": {
            "title": "Linear Regression - Probabilistic Perspective with Tensorflow and Python",
            "content": "Linear Regression - Gradient Descent . Just to set the context for the rest of the article, we will quickly look into what a linear regression is and how it learns the parameter using gradient descent at a high level. As you know, the linear regression models a linear relationship between the predictors (X1,X2,..) and the target (Y) using a set of parameters (w1,w2,..) . begin{equation*} yhat = w1*X1 + w2*X2 + b end{equation*}The main objective is to reduce the SSE(Sum of squared errors between) the predicted value y_hat and the target Y which is nothing but the loss function for linear regeression . begin{equation*} loss = frac{1}{2m} sum_{i=1}^n (yhat -y)^2 end{equation*} The following code snippet shows the way the model parameters are updated by computing the gradient of loss function with respect to the parameters. We randomly generate an example dataset of x and relate it to y by a function y = 450x+125+e where e is some random noise with mean zero. Here x is the predictor variable and y is the target variable which are the input to the model and we need to find the values of w and b( in our case its 450 and 125 respectively. we are going to take this as reference and find out if the model is able to predict the parameters correctly) . import numpy as np from matplotlib import pyplot as plt from numba import jit x= np.random.rand(2000)*100 w=450 b=125 e = np.random.normal(0.0,4000.0,2000) y=(w*x)+b+e plt.scatter(x,y) . &lt;matplotlib.collections.PathCollection at 0x7fcb92bb4eb8&gt; . To start with, we initialize the w and b to a random point. In each iteration, we update the model parameters by calculating the gradient of the loss function as below. . gradient: begin{equation*} dw = frac{1}{m} sum_{i=1}^n (yhat_i -y_i)*x_i end{equation*} . begin{equation*} db = frac{1}{m} sum_{i=1}^n (yhat_i -y_i) end{equation*}update: begin{equation*} w = w - lr*dw end{equation*} begin{equation*} b = b - lr*db end{equation*} . #LR w0 = np.random.rand(1)[0]*100 b0 = np.random.rand(1)[0]*100 lr =0.00001 m =len(x) for i in range(100000): y_hat = (w0*x)+b0 loss = (1/(2*m))*np.sum(np.square(y_hat-y)) dw =(1/m)*np.sum((y_hat-y)*x) db = (1/m)*np.sum((y_hat-y)) w0 = w0-(lr*dw) b0 = b0-(lr*db) print(f&quot;w: {w0}&quot;) print(f&quot;b: {b0}&quot;) . w: 451.47986406279534 b: 59.407900460204914 . As you can see, the predicted model parameters are close to our reference values(450 and 125) . Loss Function Decoded . To understand the loss function of linear regression, we will first review about the the gaussian distribution. The equation of gaussian distribution is given by, . begin{equation*} X sim mathcal{N}( mu, , sigma^{2}) end{equation*} begin{equation*} pdf(X=x) = frac{1}{ sqrt{2 pi sigma^{2}} }e^{ frac{-(x- mu)^2}{ 2 sigma^{2}} } end{equation*}Now let us visualize the gaussian distribution. The following plots shows a gaussian distribution with mean 30 and standard deviation 10. The second and third plot is the log and negative log of the given distribution. As you can see from the plots, that the negative log gaussian looks like a convex function . import seaborn as sns import scipy.stats fig,ax = plt.subplots(1,3,figsize=(15,5)) gaussian = scipy.stats.norm(30,10) gx=np.linspace(1,60,100) gy=gaussian.pdf(gx) log_gy = np.log(gy) neg_log_gy = -log_gy ax[0].set_title(&quot;gaussian &quot;) ax[0].plot(gx,gy) ax[1].set_title(&quot;log gaussian &quot;) ax[1].plot(gx,log_gy) ax[2].set_title(&quot;negative log gaussian &quot;) ax[2].plot(gx,neg_log_gy) . [&lt;matplotlib.lines.Line2D at 0x7fcb3e153400&gt;] . Now that we have visualized the gaussian distribution, we will next see how this is related to the loss function of a linear regression. But, before that we need to know, one more concept - Maximum likelihood estimation. . The bayes theorem states that, . begin{equation*} p(x|y) = frac{p(y|x) p(x)}{p(y)} end{equation*} begin{equation*} p(x|y) propto p(y|x) p(x) end{equation*} begin{equation*} posterior propto likelihood * prior end{equation*}The posterior is the unknown that we need to model, and for the linear regression, the unknown is the parameter w with the target y and predictor x. so we are going to rewrite the equation as . begin{equation*} p(w|y;x) propto p(y|w;x) * p(w) end{equation*}Assuming a uniform prior, it is always constant and we can ignore it from the equation. . so, begin{equation*} p(w|y;x) propto p(y|w;x) end{equation*} . we want to find the value of w that maximizes the likelihood. And for the linear regression, the likelihood is modelled as gaussian distribution with constant variance. . begin{equation*} p(y|w;x) sim mathcal{N}( mu, , sigma^{2}) end{equation*} begin{equation*} mu = wx+b = yhat end{equation*} begin{equation*} p(y|w;x) = frac{1}{ sqrt{2 pi sigma^{2}} }e^{ frac{-(y-yhat)^2}{ 2 sigma^{2}} } end{equation*}Taking the log of the above equation . begin{equation*} log ( p(y|w;x) ) = log( frac{1}{ sqrt{2 pi sigma^{2}} })+ frac{-(y-yhat)^2}{ 2 sigma^{2}} end{equation*}since we are maximizing the likelihood, we can ignore the constants, begin{equation*} log ( p(y|w;x) ) = - frac{1}{2}(y-yhat)^2 end{equation*} . taking neagtive of the above equation since we are maximizing the likelihood, we can ignore the constants, begin{equation*} neg(log ( p(y|w;x) )) = frac{1}{2}(y-yhat)^2 end{equation*} . MSE begin{equation*} neg(log ( p(y|w;x) )) = frac{1}{2m} sum_{i=1}^n (yhat -y)^2 end{equation*} . As you can see, this is the loss function of linear regression which is nothing but the negative log likelihood of gaussian distribution with mean wx+b and constant variance and from the plot above, we know that the negative log of the gaussian is convex . Linear regression using MCMC . To learn the model parameters, we optimize on the loss function until convergence using gradient descent. But gradient descent is not the only way to find the parameters and there are other techniques available. We will look at one other way to find the model parameters using MCMC - Markov Chain Monte Carlo. MCMC is usally used to sample from intractable distribution and often used as approximate solution and for the cases like linear regression where the distribution is well defined, optimization using gradient descent gives good result. The MCMC is described here to provide an alternate view on inferencing from posterior distribution. . The idea of MCMC is to build a markov chain whose stationary distribution is the posterior using algorithms like gibbs sampling or metropolis-hasting. Without going in detail of MCMC, the method samples from the posterior distribution (likelihood * prior) as specified in joint_log_prob function in the code snippet below. The method repetedly samples the values of parameters from the posterior distribution and collects them.Unlike Maximum likelihood estimation where we get the single value of parameters, the MCMC provides us with the distibution of model parameters. The plot below shows the distribution of collected samples. . # Probabilistic perspective . import tensorflow_probability as tfp import tensorflow as tf tfd = tfp.distributions tfb = tfp.bijectors def joint_log_prob(y,x,w,b): rv_w = tfd.Normal(0.,500.) rv_b = tfd.Normal(0.,200.) yhat = tf.add(tf.multiply(w,x), b) likelihood = tfd.Normal(yhat,10.) diff = y-y_hat return (rv_w.log_prob(w) + rv_b.log_prob(b) + tf.reduce_mean(likelihood.log_prob(y))) number_of_steps = 50000 burnin = 5000 leapfrog_steps=5 # Set the chain&#39;s start state. initial_chain_state = [ 200.* tf.ones([], dtype=tf.float32, name=&quot;init_prob_w&quot;), 80.* tf.ones([], dtype=tf.float32, name=&quot;init_prob_b&quot;) ] # Since HMC operates over unconstrained space, we need to transform the # samples so they live in real-space. unconstraining_bijectors = [ tfp.bijectors.Identity(), tfp.bijectors.Identity() ] # Define a closure over our joint_log_prob. # The closure makes it so the HMC doesn&#39;t try to change the `occurrences` but # instead determines the distributions of other parameters that might generate # the `occurrences` we observed. unnormalized_posterior_log_prob = lambda *args: joint_log_prob(y,x, *args) # Initialize the step_size. (It will be automatically adapted.) step_size = tf.Variable(0.3, dtype=tf.float32) # Defining the HMC hmc = tfp.mcmc.TransformedTransitionKernel( inner_kernel=tfp.mcmc.HamiltonianMonteCarlo( target_log_prob_fn=unnormalized_posterior_log_prob, num_leapfrog_steps=leapfrog_steps, step_size=0.3, #step_size_update_fn=tfp.mcmc.make_simple_step_size_update_policy(num_adaptation_steps=2000), state_gradients_are_stopped=True), bijector=unconstraining_bijectors) # Sampling from the chain. [ posterior_prob_w, posterior_prob_b ], kernel_results = tfp.mcmc.sample_chain( num_results=number_of_steps, num_burnin_steps=burnin, current_state=initial_chain_state, kernel=hmc) # Initialize any created variables. #init_g = tf.global_variables_initializer() #init_l = tf.local_variables_initializer() . /usr/local/lib/python3.6/dist-packages/tensorflow_probability/python/mcmc/sample.py:333: UserWarning: Tracing all kernel results by default is deprecated. Set the `trace_fn` argument to None (the future default value) or an explicit callback that traces the values you are interested in. warnings.warn(&#34;Tracing all kernel results by default is deprecated. Set &#34; . posterior_prob_w.numpy() . array([452.45242, 452.45242, 452.45242, ..., 452.01602, 452.01602, 452.01602], dtype=float32) . posterior_prob_b.numpy() . array([-8.021069, -8.021069, -8.021069, ..., 26.53722 , 26.53722 , 26.53722 ], dtype=float32) . plt.hist(posterior_prob_w.numpy()[5000:]) . (array([ 40., 665., 3542., 9192., 13329., 11729., 5033., 1278., 177., 15.]), array([451.0078 , 451.2717 , 451.53558, 451.79944, 452.06332, 452.3272 , 452.5911 , 452.85498, 453.11884, 453.38272, 453.6466 ], dtype=float32), &lt;a list of 10 Patch objects&gt;) . plt.hist(posterior_prob_b.numpy()[5000:]) . (array([ 82., 880., 1854., 5456., 10615., 10411., 8480., 4948., 1931., 343.]), array([-56.901062, -44.800816, -32.70057 , -20.60032 , -8.500073, 3.600174, 15.700421, 27.800669, 39.900917, 52.001163, 64.10141 ], dtype=float32), &lt;a list of 10 Patch objects&gt;) . np.mean(posterior_prob_w.numpy()[5000:]) . 452.2421 . np.mean(posterior_prob_b.numpy()[5000:]) . 8.208073 . xax = [i for i in range(5000, len(posterior_prob_w))] plt.scatter(xax,posterior_prob_w.numpy()[5000:]) . &lt;matplotlib.collections.PathCollection at 0x7fcb38e3c128&gt; . plt.scatter(xax,posterior_prob_b.numpy()[5000:]) . &lt;matplotlib.collections.PathCollection at 0x7fcb4237a6a0&gt; .",
            "url": "https://vignesh8491.github.io/myblog/2020/07/19/linear_regression_blog.html",
            "relUrl": "/2020/07/19/linear_regression_blog.html",
            "date": " • Jul 19, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "This is TEST blog",
            "content": "import numpy as np import pandas as pd from matplotlib import pyplot as plt . data = {&quot;name&quot;:[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;], &quot;age&quot;:[1,2,3]} data = pd.DataFrame(data) data . name age . 0 | a | 1 | . 1 | b | 2 | . 2 | c | 3 | . The below plot shows the histogram of age in the data . Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras maximus sed urna ac volutpat. Nunc dapibus et turpis at varius. Nullam maximus elementum venenatis. Ut mattis porta eros aliquam gravida. Quisque malesuada eleifend nunc nec faucibus. Morbi sed vehicula elit. Aliquam erat volutpat. Donec feugiat diam in porta lobortis. Donec et turpis sed justo consectetur accumsan. Vestibulum orci dui, efficitur vitae ultrices sit amet, pretium eu eros. Praesent eget velit laoreet, maximus eros vel, vehicula ex. Nullam tincidunt tempor metus, non hendrerit dui dictum eget. Proin non euismod massa, et sollicitudin sem. Praesent sed purus risus. . data[&#39;age&#39;].plot(kind=&#39;hist&#39;) plt.show() . Sync test . this is a test for tessting sync .",
            "url": "https://vignesh8491.github.io/myblog/blog/2020/03/28/test_blog.html",
            "relUrl": "/blog/2020/03/28/test_blog.html",
            "date": " • Mar 28, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vignesh8491.github.io/myblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vignesh8491.github.io/myblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://vignesh8491.github.io/myblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}